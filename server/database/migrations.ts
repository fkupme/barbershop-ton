import bcrypt from 'bcryptjs';
import { db } from './db';

export async function runMigrations() {
	console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...');

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–¥–º–∏–Ω–æ–≤
	await db.schema
		.createTable('admins')
		.ifNotExists()
		.addColumn('id', 'integer', col => col.primaryKey().autoIncrement())
		.addColumn('username', 'varchar(50)', col => col.notNull().unique())
		.addColumn('password', 'varchar(255)', col => col.notNull())
		.addColumn('email', 'varchar(100)', col => col.notNull().unique())
		.addColumn('role', 'varchar(20)', col => col.notNull().defaultTo('admin'))
		.addColumn('created_at', 'datetime', col =>
			col.notNull().defaultTo(new Date().toISOString())
		)
		.addColumn('updated_at', 'datetime', col =>
			col.notNull().defaultTo(new Date().toISOString())
		)
		.execute();

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
	await db.schema
		.createTable('products')
		.ifNotExists()
		.addColumn('id', 'integer', col => col.primaryKey().autoIncrement())
		.addColumn('title', 'varchar(255)', col => col.notNull())
		.addColumn('description', 'text')
		.addColumn('image_url', 'varchar(500)')
		.addColumn('category', 'varchar(50)', col => col.notNull())
		.addColumn('category_name', 'varchar(100)', col => col.notNull())
		.addColumn('tags', 'text') // JSON array as string
		.addColumn('price', 'integer') // –¶–µ–Ω–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
		.addColumn('is_active', 'boolean', col => col.notNull().defaultTo(true))
		.addColumn('sort_order', 'integer', col => col.notNull().defaultTo(0))
		.addColumn('created_at', 'datetime', col =>
			col.notNull().defaultTo(new Date().toISOString())
		)
		.addColumn('updated_at', 'datetime', col =>
			col.notNull().defaultTo(new Date().toISOString())
		)
		.execute();

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ª—É–≥
	await db.schema
		.createTable('services')
		.ifNotExists()
		.addColumn('id', 'integer', col => col.primaryKey().autoIncrement())
		.addColumn('title', 'varchar(255)', col => col.notNull())
		.addColumn('description', 'text')
		.addColumn('price', 'integer', col => col.notNull())
		.addColumn('duration', 'integer') // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
		.addColumn('category', 'varchar(50)', col => col.notNull())
		.addColumn('category_name', 'varchar(100)', col => col.notNull())
		.addColumn('tags', 'text') // JSON array as string
		.addColumn('is_active', 'boolean', col => col.notNull().defaultTo(true))
		.addColumn('sort_order', 'integer', col => col.notNull().defaultTo(0))
		.addColumn('created_at', 'datetime', col =>
			col.notNull().defaultTo(new Date().toISOString())
		)
		.addColumn('updated_at', 'datetime', col =>
			col.notNull().defaultTo(new Date().toISOString())
		)
		.execute();

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–µ—Ä–æ—è
	await db.schema
		.createTable('hero_images')
		.ifNotExists()
		.addColumn('id', 'integer', col => col.primaryKey().autoIncrement())
		.addColumn('image_url', 'varchar(500)', col => col.notNull())
		.addColumn('alt_text', 'varchar(255)')
		.addColumn('is_active', 'boolean', col => col.notNull().defaultTo(true))
		.addColumn('sort_order', 'integer', col => col.notNull().defaultTo(0))
		.addColumn('created_at', 'datetime', col =>
			col.notNull().defaultTo(new Date().toISOString())
		)
		.addColumn('updated_at', 'datetime', col =>
			col.notNull().defaultTo(new Date().toISOString())
		)
		.execute();

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π marquee —Å–µ–∫—Ü–∏–∏
	await db.schema
		.createTable('marquee_images')
		.ifNotExists()
		.addColumn('id', 'integer', col => col.primaryKey().autoIncrement())
		.addColumn('image_url', 'varchar(500)', col => col.notNull())
		.addColumn('alt_text', 'varchar(255)')
		.addColumn('is_active', 'boolean', col => col.notNull().defaultTo(true))
		.addColumn('sort_order', 'integer', col => col.notNull().defaultTo(0))
		.addColumn('created_at', 'datetime', col =>
			col.notNull().defaultTo(new Date().toISOString())
		)
		.addColumn('updated_at', 'datetime', col =>
			col.notNull().defaultTo(new Date().toISOString())
		)
		.execute();

	console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É duration –≤ —Ç–∞–±–ª–∏—Ü—É services –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	try {
		console.log('‚ö° –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É duration –≤ —Ç–∞–±–ª–∏—Ü–µ services');
		await db.schema
			.alterTable('services')
			.addColumn('duration', 'integer')
			.execute();
		console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ duration –¥–æ–±–∞–≤–ª–µ–Ω–∞');
	} catch (error: any) {
		if (error.message && error.message.includes('duplicate column')) {
			console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ duration —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
		} else {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ duration:', error);
		}
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
	const existingAdmin = await db
		.selectFrom('admins')
		.where('username', '=', 'admin')
		.selectAll()
		.executeTakeFirst();

	if (!existingAdmin) {
		const hashedPassword = await bcrypt.hash('admin123', 10);

		await db
			.insertInto('admins')
			.values({
				username: 'admin',
				password: hashedPassword,
				email: 'admin@barbershop.com',
				role: 'super_admin',
			})
			.execute();

		console.log('‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥–º–∏–Ω (admin/admin123)');
	}

	console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}
